(()=>{"use strict";(()=>{const e=(e=document,t)=>e.querySelector(t);function t(){const e=this.node,t=Array.from((new DOMParser).parseFromString(this.template(),"text/html").body.children),s=new DocumentFragment;s.append(...t),e.after(s),this.node=e.nextSibling;const n=e.classList.value.trim(),i=this.node.classList.value.trim(),a=n!==i&&i||n;a?(this.node.className=a,e.remove()):e.remove()}const s={ARROWUP:"ArrowUp",ARROWDOWN:"ArrowDown",ENTER:"Enter",ESCAPE:"Escape"};var n=function(e,t,s,n){return new(s||(s=Promise))((function(i,a){function r(e){try{l(n.next(e))}catch(e){a(e)}}function o(e){try{l(n.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(r,o)}l((n=n.apply(e,t||[])).next())}))};class i{constructor({node:e,initalState:t,renderStateKey:s=[]}){this.node=e,this.initalState=t,this.renderStateKey=new Set(s),this.subscribers=new Set([]),this.isNeedRender=!1,this.isNeedUpdate=!1,this.setup(),this.render()}setup(){}render(){window.requestAnimationFrame((()=>{t.call(this),this.setEvent(),this.renderChildComponent()}))}updater(){this.isNeedRender?(this.clearEvent(),this.render()):this.renderChildComponent()}renderChildComponent(){}setEvent(){}clearEvent(){}template(){return""}subscribe(...e){e.forEach((e=>{this.subscribers.add(e)}))}notify(e){Array.from(this.subscribers).forEach((t=>{t.setState(e),t.updater(),t.isNeedRender=!1}))}setState(e){this.checkUpdataState(e),this.isNeedUpdate&&(this.reflectNeedRender(e),this.reflectState(e),this.notify(e),((e,t)=>{try{sessionStorage.setItem("searchState",JSON.stringify(t))}catch(e){throw new Error("저장이 되지 않았습니다!")}})(0,this.initalState))}checkUpdataState(e){const t=JSON.stringify(Object.assign({},this.initalState)),s=JSON.stringify(Object.assign(Object.assign({},this.initalState),e));this.isNeedUpdate=t!==s}reflectNeedRender(e){const t=Object.keys(e),s=Array.from(this.renderStateKey),n=t.filter((e=>s.includes(e)));this.isNeedRender=0===n.length}reflectState(e){Object.keys(e).forEach((t=>{const s=t;this.initalState[s]=e[s]}))}}const a={SearchInput__input:"oZFdS8AMjR5RMYyBNvKV"};class r extends i{template(){const{SearchInput__input:e}=a,{keyword:t}=this.initalState;return`\n      <input class='${e}' type='text' placeholder='웹툰제목, 작가이름으로 검색' value='${t}'/>\n    `}setup(){const{onInput:e}=this.initalState;this.handleInput=t=>{e(t.target.value)},this.handleFocus=()=>{this.node.focus()}}setEvent(){this.node.addEventListener("input",this.handleInput),this.handleFocus()}clearEvent(){this.node.removeEventListener("input",this.handleInput)}}const o={result_list:"hjCdco27lJJTo2oyRN5w",selected:"yqBqWxiR9AStGB58rLfS",matched:"OAf5JwkD9oSOJWplWK_0"};class l extends i{template(){var e;const{selectedIndex:t,isResultListVisiable:s,listData:n,keyword:i}=this.initalState,{result_list:a,selected:r,matched:l}=o,c=(e,t)=>{if(!e.includes(t))return e;const s=e.match(new RegExp(t,"gi"))[0];return e.replace(new RegExp(s,"gi"),`<span class='${l}'>${s}</span>`)};return`\n      <ul class='${s?`${a}`:"hide"}'>\n      ${null===(e=Array.from(n))||void 0===e?void 0:e.map(((e,s)=>`<li class='${s===t?`${r}`:""}' data-index='${s}'>\n              <span>${c(e.title,i)}</span>\n              <span>[ ${c(e.author,i)} ] </span>\n            </li>`)).join("")}\n      </ul>\n    `}setup(){const{onClick:e}=this.initalState;this.handleClick=t=>{const s=t.target.closest("li");if(s){const{index:t}=s.dataset;e(this.initalState.listData[parseInt(t)],t)}}}setEvent(){this.node.addEventListener("click",this.handleClick);const{selectedIndex:e}=this.initalState;(e>0&&e<=3||0===e)&&this.node.scrollTo(0,0),e>3&&this.node.scrollTo(0,40.5*(e-3))}clearEvent(){this.node.removeEventListener("click",this.handleClick)}}const c={item_info:"b_BiEQCaWN0N4grQNoR_",modal:"fVwZcXiNTz_b6jCy8MuZ",info_text_cont:"TBe_D0noTQ1AXQvtqIa2"};class d extends i{template(){const{isModalVisiable:e,selectedItem:t}=this.initalState,{item_info:s,modal:n,info_text_cont:i}=c;return`\n    <div>\n    ${e?`\n      <div class='${s} item_info' >\n        <div\n          class='${n}'\n          style='background-image:linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 1)), url(${t.img});'>\n          <button class="material-icons">cancel</button>\n          <div class='${i}'>\n            <p>${t.title}</p>\n            <p>${t.author}</p>\n            <p>${t.service} 연재</p>\n            <a href='${t.url}' target='_blank'>보러가기</a>\n          </div>\n        </div>\n      </div>\n      `:""}\n    </div>\n    `}}const h={error_meg:"mawL5jYPblmXxcwJ7f3X",up:"EA5KfYSJlSA5Ljg3Wyns"};class u extends i{template(){const{isErrorMeg:e,keyword:t,isResultListVisiable:s}=this.initalState,{error_meg:n}=h,i=`<span><strong>'${t}'</strong> 의 검색 결과가 없습니다 :(</span>`;return`\n      <div class='${n}'>\n        ${e?0===t.length?"<span>검색어를 입력해주세요 :)</span>":t.length<2&&t.length>0?"<span><strong>'두 글자'</strong> 부터 검색이 가능합니다 :)</span>":!s&&t.length>=2?i:void 0:""}\n      </div>\n    `}}new class extends i{constructor({node:e}){super({node:e,initalState:{keyword:"",selectedIndex:0,listData:[],selectedItem:{},isResultListVisiable:!1,isModalVisiable:!1,isErrorMeg:!0}})}setup(){this.setState(Object.assign(Object.assign({},this.initalState),(e=>{try{const e=sessionStorage.getItem("searchState");return e?JSON.parse(e):[]}catch(e){throw new Error(e)}})())),this.handleChange=((e,t)=>{let s;return t=>{s&&clearTimeout(s),s=window.setTimeout(e,300,t)}})((e=>{return t=this,s=void 0,a=function*(){const t=yield(e=>n(void 0,void 0,void 0,(function*(){return t=`https://korea-webtoon-api.herokuapp.com/search?keyword=${e}`,n(void 0,void 0,void 0,(function*(){try{const e=yield fetch(t);if(!e.ok)throw new Error("서버와의 연결이 불안정합니다!");return(yield e.json()).webtoons}catch(e){console.error(`에러가 발생했습니다! ${e.message}`)}}));var t})))(e);e?this.setState({isResultListVisiable:t.length>0,listData:t,keyword:e,isErrorMeg:!(t.length>0)}):this.setState({isResultListVisiable:!1,selectedIndex:0,keyword:"",listData:t.length?t:[],selectedItem:{}})},new((i=void 0)||(i=Promise))((function(e,n){function r(e){try{l(a.next(e))}catch(e){n(e)}}function o(e){try{l(a.throw(e))}catch(e){n(e)}}function l(t){var s;t.done?e(t.value):(s=t.value,s instanceof i?s:new i((function(e){e(s)}))).then(r,o)}l((a=a.apply(t,s||[])).next())}));var t,s,i,a})),this.handleKeyChange=e=>{const{listData:t,selectedIndex:n}=this.initalState;if(Object.values(s).includes(e.key)&&!t.length)return;const i=t.length-1;let a=n;switch(e.key){case s.ARROWUP:a=0===n?i:a-1,this.setState({selectedIndex:a});break;case s.ARROWDOWN:a=n===i?0:a+1,this.setState({selectedIndex:a});break;case s.ENTER:e.preventDefault(),this.setState({selectedItem:t[n],isModalVisiable:!0});break;case s.ESCAPE:this.setState({isModalVisiable:!1})}},this.handleClick=e=>{const t=e.target;(t.closest("button")||t.classList.contains("item_info"))&&this.setState({isModalVisiable:!1})}}template(){return"\n      <main id='root'>\n        <header class='header'>Webtoons Search</header>\n        <div class='container'>\n          <SearchInput></SearchInput>\n          <ErrorMessage></ErrorMessage>\n          <SearchResultList></SearchResultList>\n          <SearchItemInfo></SearchItemInfo>\n        </div>\n      </main>\n  "}renderChildComponent(){const{keyword:t,selectedIndex:s,listData:n,isResultListVisiable:i,selectedItem:a,isModalVisiable:o,isErrorMeg:c}=this.initalState;new r({node:e(this.node,"SearchInput"),initalState:{keyword:this.initalState.keyword,onInput:this.handleChange}});const h=new u({node:e(this.node,"ErrorMessage"),renderStateKey:["selectedItem","selectedIndex"],initalState:{isErrorMeg:c,keyword:t,isResultListVisiable:i}}),p=new l({node:e(this.node,"SearchResultList"),initalState:{keyword:t,listData:n,isResultListVisiable:i,selectedIndex:s,onClick:(e,t)=>{this.setState({selectedItem:e,isModalVisiable:!0,selectedIndex:Number(t)})}}}),S=new d({node:e(this.node,"SearchItemInfo"),initalState:{selectedItem:a,isModalVisiable:o}});this.subscribe(p),this.subscribe(S),this.subscribe(h)}setEvent(){window.addEventListener("keyup",this.handleKeyChange),this.node.addEventListener("click",this.handleClick)}clearEvent(){window.removeEventListener("keyup",this.handleKeyChange),this.node.removeEventListener("click",this.handleClick)}}({node:e(document,"#root"),initalState:null})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QWlCLFFBQVNqRixLQUFLNEksaUJBQ3RDNUksS0FBS0MsS0FBS2dGLGlCQUFpQixRQUFTakYsS0FBS3NHLFlBQzNDLENBRUExRCxhQUNFTixPQUFPNEMsb0JBQW9CLFFBQVNsRixLQUFLNEksaUJBQ3pDNUksS0FBS0MsS0FBS2lGLG9CQUFvQixRQUFTbEYsS0FBS3NHLFlBQzlDLEdEOUtNLENBQUVyRyxLQUFNUixFQUFTRSxTQUFVLFNBQVVtQyxZQUFhLE0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJ0b29ucy1zZWFyY2gvLi9zcmMvdXRpbHMvZG9tL2luZGV4LnRzIiwid2VicGFjazovL3dlYnRvb25zLXNlYXJjaC8uL3NyYy9jb25zdGFudHMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vd2VidG9vbnMtc2VhcmNoLy4vc3JjL2NvbXBvbmVudHMvY29yZS9Db21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vd2VidG9vbnMtc2VhcmNoLy4vc3JjL3V0aWxzL3N0b3JhZ2UvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vd2VidG9vbnMtc2VhcmNoLy4vc3JjL2NvbXBvbmVudHMvc2VhcmNoL1NlYXJjaElucHV0L1NlYXJjaElucHV0Lm1vZHVsZS5zY3NzPzE0NzEiLCJ3ZWJwYWNrOi8vd2VidG9vbnMtc2VhcmNoLy4vc3JjL2NvbXBvbmVudHMvc2VhcmNoL1NlYXJjaElucHV0L2luZGV4LnRzIiwid2VicGFjazovL3dlYnRvb25zLXNlYXJjaC8uL3NyYy9jb21wb25lbnRzL3NlYXJjaC9TZWFyY2hSZXN1bHQvU2VhcmNoUmVzdWx0Lm1vZHVsZS5zY3NzPzFhYjkiLCJ3ZWJwYWNrOi8vd2VidG9vbnMtc2VhcmNoLy4vc3JjL2NvbXBvbmVudHMvc2VhcmNoL1NlYXJjaFJlc3VsdC9pbmRleC50cyIsIndlYnBhY2s6Ly93ZWJ0b29ucy1zZWFyY2gvLi9zcmMvY29tcG9uZW50cy9zZWFyY2gvU2VhcmNoSXRlbUluZm8vU2VhcmNoSXRlbUluZm8ubW9kdWxlLnNjc3M/MTFhMiIsIndlYnBhY2s6Ly93ZWJ0b29ucy1zZWFyY2gvLi9zcmMvY29tcG9uZW50cy9zZWFyY2gvU2VhcmNoSXRlbUluZm8vaW5kZXgudHMiLCJ3ZWJwYWNrOi8vd2VidG9vbnMtc2VhcmNoLy4vc3JjL2NvbXBvbmVudHMvbWVzc2FnZS9FcnJvck1lZy9FcnJvck1lZy5tb2R1bGUuc2Nzcz8wYTNmIiwid2VicGFjazovL3dlYnRvb25zLXNlYXJjaC8uL3NyYy9jb21wb25lbnRzL21lc3NhZ2UvRXJyb3JNZWcvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vd2VidG9vbnMtc2VhcmNoLy4vc3JjL21haW4udHMiLCJ3ZWJwYWNrOi8vd2VidG9vbnMtc2VhcmNoLy4vc3JjL0FwcC50cyIsIndlYnBhY2s6Ly93ZWJ0b29ucy1zZWFyY2gvLi9zcmMvdXRpbHMvaGVscGVycy9pbmRleC50cyIsIndlYnBhY2s6Ly93ZWJ0b29ucy1zZWFyY2gvLi9zcmMvYXBpL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgSVNlbGVjdFR5cGUgfSBmcm9tICcuL3R5cGUnXG5cbmNvbnN0IHNlbGVjdEVsID0gKFxuICBzY29wZTogRWxlbWVudCB8IERvY3VtZW50ID0gZG9jdW1lbnQsXG4gIHNlbGVjdG9yOiBzdHJpbmdcbik6IEVsZW1lbnQgPT4ge1xuICByZXR1cm4gc2NvcGUucXVlcnlTZWxlY3RvcihzZWxlY3Rvcilcbn1cblxuY29uc3Qgc2VsZWN0QWxsID0gKHsgc2NvcGUsIHNlbGVjdG9yIH06IElTZWxlY3RUeXBlKTogRWxlbWVudFtdID0+IHtcbiAgcmV0dXJuIEFycmF5LmZyb20oc2NvcGUucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpXG59XG5cbmNvbnN0IGNyZWF0ZUVsID0gKHRhZ05hbWU6IHN0cmluZyk6IEVsZW1lbnQgPT4ge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKVxufVxuXG5mdW5jdGlvbiBDb252ZXJ0VGVtcGxhdGVUb0NvbXBvbmVudCh0aGlzOiBhbnkpOiB2b2lkIHtcbiAgY29uc3Qgb2xkTm9kZSA9IHRoaXMubm9kZVxuICBjb25zdCBjb21wb25lbnRDaGlsZHJlbiA9IEFycmF5LmZyb20oXG4gICAgbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyh0aGlzLnRlbXBsYXRlKCksICd0ZXh0L2h0bWwnKS5ib2R5LmNoaWxkcmVuXG4gIClcbiAgY29uc3QgY29tcG9uZW50ID0gbmV3IERvY3VtZW50RnJhZ21lbnQoKVxuICBjb21wb25lbnQuYXBwZW5kKC4uLmNvbXBvbmVudENoaWxkcmVuKVxuXG4gIG9sZE5vZGUuYWZ0ZXIoY29tcG9uZW50KVxuICB0aGlzLm5vZGUgPSBvbGROb2RlLm5leHRTaWJsaW5nXG5cbiAgY29uc3Qgb2xkQ1NTID0gb2xkTm9kZS5jbGFzc0xpc3QudmFsdWUudHJpbSgpXG4gIGNvbnN0IG5ld0NTUyA9IHRoaXMubm9kZS5jbGFzc0xpc3QudmFsdWUudHJpbSgpXG4gIGNvbnN0IGlzQ2hhbmdlZENTUyA9IG9sZENTUyAhPT0gbmV3Q1NTXG4gIGNvbnN0IGNzc1ZhbHVlID0gaXNDaGFuZ2VkQ1NTID8gbmV3Q1NTIHx8IG9sZENTUyA6IG9sZENTU1xuXG4gIGlmICghY3NzVmFsdWUpIHtcbiAgICBvbGROb2RlLnJlbW92ZSgpXG4gICAgcmV0dXJuXG4gIH1cblxuICB0aGlzLm5vZGUuY2xhc3NOYW1lID0gY3NzVmFsdWVcblxuICBvbGROb2RlLnJlbW92ZSgpXG59XG5cbmV4cG9ydCB7IGNyZWF0ZUVsLCBzZWxlY3RFbCwgc2VsZWN0QWxsLCBDb252ZXJ0VGVtcGxhdGVUb0NvbXBvbmVudCB9XG4iLCIvKiogYXBpICovXG5jb25zdCBCQVNFX1VSTCA9ICdodHRwczovL2tvcmVhLXdlYnRvb24tYXBpLmhlcm9rdWFwcC5jb20nXG5jb25zdCBSRVFVU0VUX01FU1NBR0UgPSB7XG4gIEhUVFBfRVJST1I6ICfshJzrsoTsmYDsnZgg7Jew6rKw7J20IOu2iOyViOygle2VqeuLiOuLpCEnLFxuICBTRVJWRVJfRVJST1I6ICfsl5Drn6zqsIAg67Cc7IOd7ZaI7Iq164uI64ukISdcbn1cblxuLyoqIGFjdGlvbmtleXMgdHlwZSAqL1xuY29uc3QgQUNUSU9OS0VZUyA9IHtcbiAgQVJST1dVUDogJ0Fycm93VXAnLFxuICBBUlJPV0RPV046ICdBcnJvd0Rvd24nLFxuICBFTlRFUjogJ0VudGVyJyxcbiAgRVNDQVBFOiAnRXNjYXBlJ1xufVxuXG5leHBvcnQgeyBCQVNFX1VSTCwgUkVRVVNFVF9NRVNTQUdFLCBBQ1RJT05LRVlTIH1cbiIsImltcG9ydCB0eXBlIHsgSUNvbXBvbmVudFByb3BzIH0gZnJvbSAnQG1vZGVscydcbmltcG9ydCB7IENvbnZlcnRUZW1wbGF0ZVRvQ29tcG9uZW50LCBzZXRJdGVtIH0gZnJvbSAnQHV0aWxzJ1xuXG5leHBvcnQgZGVmYXVsdCBhYnN0cmFjdCBjbGFzcyBDb21wb25lbnQ8U3RhdGVUeXBlPiB7XG4gIG5vZGU6IEVsZW1lbnRcbiAgaW5pdGFsU3RhdGU6IFN0YXRlVHlwZVxuICByZW5kZXJTdGF0ZUtleTogU2V0PHN0cmluZz5cbiAgc3Vic2NyaWJlcnM6IFNldDxhbnk+XG4gIGlzTmVlZFJlbmRlcjogYm9vbGVhblxuICBpc05lZWRVcGRhdGU6IGJvb2xlYW5cbiAgY29uc3RydWN0b3Ioe1xuICAgIG5vZGUsXG4gICAgaW5pdGFsU3RhdGUsXG4gICAgcmVuZGVyU3RhdGVLZXkgPSBbXVxuICB9OiBJQ29tcG9uZW50UHJvcHM8U3RhdGVUeXBlPikge1xuICAgIHRoaXMubm9kZSA9IG5vZGVcbiAgICB0aGlzLmluaXRhbFN0YXRlID0gaW5pdGFsU3RhdGVcbiAgICB0aGlzLnJlbmRlclN0YXRlS2V5ID0gbmV3IFNldChyZW5kZXJTdGF0ZUtleSlcbiAgICB0aGlzLnN1YnNjcmliZXJzID0gbmV3IFNldChbXSlcbiAgICB0aGlzLmlzTmVlZFJlbmRlciA9IGZhbHNlXG4gICAgdGhpcy5pc05lZWRVcGRhdGUgPSBmYWxzZVxuXG4gICAgdGhpcy5zZXR1cCgpXG4gICAgdGhpcy5yZW5kZXIoKVxuICB9XG5cbiAgc2V0dXAoKTogdm9pZCB7XG4gICAgcmV0dXJuXG4gIH1cblxuICByZW5kZXIoKTogdm9pZCB7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBDb252ZXJ0VGVtcGxhdGVUb0NvbXBvbmVudC5jYWxsKHRoaXMpXG4gICAgICB0aGlzLnNldEV2ZW50KClcbiAgICAgIHRoaXMucmVuZGVyQ2hpbGRDb21wb25lbnQoKVxuICAgIH0pXG4gIH1cblxuICB1cGRhdGVyKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5pc05lZWRSZW5kZXIpIHtcbiAgICAgIHRoaXMucmVuZGVyQ2hpbGRDb21wb25lbnQoKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5jbGVhckV2ZW50KClcbiAgICB0aGlzLnJlbmRlcigpXG4gIH1cblxuICByZW5kZXJDaGlsZENvbXBvbmVudCgpOiB2b2lkIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHNldEV2ZW50KCk6IHZvaWQge1xuICAgIHJldHVyblxuICB9XG5cbiAgY2xlYXJFdmVudCgpOiB2b2lkIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHRlbXBsYXRlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBzdWJzY3JpYmUoLi4uc3Vic2NyaWJlcnM6IGFueVtdKTogdm9pZCB7XG4gICAgc3Vic2NyaWJlcnMuZm9yRWFjaChzdWJzY3JpYmVyID0+IHtcbiAgICAgIHRoaXMuc3Vic2NyaWJlcnMuYWRkKHN1YnNjcmliZXIpXG4gICAgfSlcbiAgfVxuXG4gIG5vdGlmeShuZXdTdGF0ZTogYW55KTogdm9pZCB7XG4gICAgY29uc3Qgc3Vic2NyaWJlcnMgPSBBcnJheS5mcm9tKHRoaXMuc3Vic2NyaWJlcnMpXG5cbiAgICBzdWJzY3JpYmVycy5mb3JFYWNoKHN1YnNjcmliZXIgPT4ge1xuICAgICAgc3Vic2NyaWJlci5zZXRTdGF0ZShuZXdTdGF0ZSlcbiAgICAgIHN1YnNjcmliZXIudXBkYXRlcigpXG4gICAgICBzdWJzY3JpYmVyLmlzTmVlZFJlbmRlciA9IGZhbHNlXG4gICAgfSlcbiAgfVxuXG4gIHNldFN0YXRlKG5ld1N0YXRlOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLmNoZWNrVXBkYXRhU3RhdGUobmV3U3RhdGUpXG5cbiAgICBpZiAoIXRoaXMuaXNOZWVkVXBkYXRlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLnJlZmxlY3ROZWVkUmVuZGVyKG5ld1N0YXRlKVxuICAgIHRoaXMucmVmbGVjdFN0YXRlKG5ld1N0YXRlKVxuICAgIHRoaXMubm90aWZ5KG5ld1N0YXRlKVxuXG4gICAgc2V0SXRlbSgnc2VhcmNoU3RhdGUnLCB0aGlzLmluaXRhbFN0YXRlKVxuICB9XG5cbiAgY2hlY2tVcGRhdGFTdGF0ZShuZXdTdGF0ZTogYW55KTogdm9pZCB7XG4gICAgY29uc3QgY3VycmVudFN0YXRlID0gSlNPTi5zdHJpbmdpZnkoeyAuLi50aGlzLmluaXRhbFN0YXRlIH0pXG4gICAgY29uc3QgbmV4dFN0YXRlID0gSlNPTi5zdHJpbmdpZnkoeyAuLi50aGlzLmluaXRhbFN0YXRlLCAuLi5uZXdTdGF0ZSB9KVxuXG4gICAgdGhpcy5pc05lZWRVcGRhdGUgPSBjdXJyZW50U3RhdGUgIT09IG5leHRTdGF0ZVxuICB9XG5cbiAgcmVmbGVjdE5lZWRSZW5kZXIobmV3U3RhdGU6IGFueSk6IHZvaWQge1xuICAgIGNvbnN0IHVwZGF0ZWRTdGF0ZUtleXMgPSBPYmplY3Qua2V5cyhuZXdTdGF0ZSlcbiAgICBjb25zdCByZW5kZXJTdGF0ZUtleSA9IEFycmF5LmZyb20odGhpcy5yZW5kZXJTdGF0ZUtleSlcblxuICAgIGNvbnN0IHN0YXRlID0gdXBkYXRlZFN0YXRlS2V5cy5maWx0ZXIoa2V5ID0+IHJlbmRlclN0YXRlS2V5LmluY2x1ZGVzKGtleSkpXG4gICAgdGhpcy5pc05lZWRSZW5kZXIgPSBzdGF0ZS5sZW5ndGggPT09IDBcbiAgfVxuXG4gIHJlZmxlY3RTdGF0ZShuZXdTdGF0ZTogYW55KTogdm9pZCB7XG4gICAgY29uc3QgdXBkYXRlZFN0YXRlS2V5cyA9IE9iamVjdC5rZXlzKG5ld1N0YXRlKVxuXG4gICAgdXBkYXRlZFN0YXRlS2V5cy5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBjb25zdCBzdGF0ZUtleSA9IGtleSBhcyBrZXlvZiBTdGF0ZVR5cGVcbiAgICAgIHRoaXMuaW5pdGFsU3RhdGVbc3RhdGVLZXldID0gbmV3U3RhdGVbXG4gICAgICAgIHN0YXRlS2V5XG4gICAgICBdIGFzIFN0YXRlVHlwZVtrZXlvZiBTdGF0ZVR5cGVdXG4gICAgfSlcbiAgfVxufVxuIiwiY29uc3Qgc2V0SXRlbSA9IChrZXk6IHN0cmluZywgdmFsdWU6IGFueSk6IHZvaWQgPT4ge1xuICB0cnkge1xuICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeSh2YWx1ZSkpXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGDsoIDsnqXsnbQg65CY7KeAIOyViuyVmOyKteuLiOuLpCFgKVxuICB9XG59XG5cbmNvbnN0IGdldEl0ZW0gPSAoa2V5OiBzdHJpbmcpOiBhbnkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHZhbHVlID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShrZXkpXG4gICAgcmV0dXJuIHZhbHVlID8gSlNPTi5wYXJzZSh2YWx1ZSkgOiBbXVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHRocm93IG5ldyBFcnJvcihlcnJvcilcbiAgfVxufVxuXG5leHBvcnQgeyBzZXRJdGVtLCBnZXRJdGVtIH1cbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IGRlZmF1bHQge1wiU2VhcmNoSW5wdXRfX2lucHV0XCI6XCJvWkZkUzhBTWpSNVJNWXlCTnZLVlwifTsiLCJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAY29tcG9uZW50cydcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9TZWFyY2hJbnB1dC5tb2R1bGUuc2NzcydcbmltcG9ydCB0eXBlIHsgSVNlYXJjaElucHV0U3RhdGUgfSBmcm9tICcuL3R5cGUnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlYXJjaElucHV0IGV4dGVuZHMgQ29tcG9uZW50PElTZWFyY2hJbnB1dFN0YXRlPiB7XG4gIGhhbmRsZUlucHV0OiAoZTogYW55KSA9PiB2b2lkXG4gIGhhbmRsZUZvY3VzOiAoKSA9PiB2b2lkXG4gIHRlbXBsYXRlKCk6IHN0cmluZyB7XG4gICAgY29uc3QgeyBTZWFyY2hJbnB1dF9faW5wdXQgfSA9IHN0eWxlc1xuICAgIGNvbnN0IHsga2V5d29yZCB9ID0gdGhpcy5pbml0YWxTdGF0ZVxuXG4gICAgcmV0dXJuIGBcbiAgICAgIDxpbnB1dCBjbGFzcz0nJHtTZWFyY2hJbnB1dF9faW5wdXR9JyB0eXBlPSd0ZXh0JyBwbGFjZWhvbGRlcj0n7Ju57Yiw7KCc66qpLCDsnpHqsIDsnbTrpoTsnLzroZwg6rKA7IOJJyB2YWx1ZT0nJHtrZXl3b3JkfScvPlxuICAgIGBcbiAgfVxuXG4gIHNldHVwKCk6IHZvaWQge1xuICAgIGNvbnN0IHsgb25JbnB1dCB9ID0gdGhpcy5pbml0YWxTdGF0ZVxuXG4gICAgdGhpcy5oYW5kbGVJbnB1dCA9IChlKTogdm9pZCA9PiB7XG4gICAgICBvbklucHV0KGUudGFyZ2V0LnZhbHVlKVxuICAgIH1cblxuICAgIHRoaXMuaGFuZGxlRm9jdXMgPSAoKTogdm9pZCA9PiB7XG4gICAgICBjb25zdCAkaW5wdXQgPSB0aGlzLm5vZGUgYXMgSFRNTElucHV0RWxlbWVudFxuICAgICAgJGlucHV0LmZvY3VzKClcbiAgICB9XG4gIH1cblxuICBzZXRFdmVudCgpOiB2b2lkIHtcbiAgICB0aGlzLm5vZGUuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB0aGlzLmhhbmRsZUlucHV0KVxuICAgIHRoaXMuaGFuZGxlRm9jdXMoKVxuICB9XG5cbiAgY2xlYXJFdmVudCgpOiB2b2lkIHtcbiAgICB0aGlzLm5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB0aGlzLmhhbmRsZUlucHV0KVxuICB9XG59XG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCBkZWZhdWx0IHtcInJlc3VsdF9saXN0XCI6XCJoakNkY28yN2xKSlRvMm95Uk41d1wiLFwic2VsZWN0ZWRcIjpcInlxQnFXeGlSOUFTdEdCNThyTGZTXCIsXCJtYXRjaGVkXCI6XCJPQWY1SndrRDlvU09KV3BsV0tfMFwifTsiLCJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAY29tcG9uZW50cydcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9TZWFyY2hSZXN1bHQubW9kdWxlLnNjc3MnXG5pbXBvcnQgdHlwZSB7IElTZWFyY2hSZXN1bHRTdGF0ZSB9IGZyb20gJy4vdHlwZSdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VhcmNoUmVzdWx0IGV4dGVuZHMgQ29tcG9uZW50PElTZWFyY2hSZXN1bHRTdGF0ZT4ge1xuICBoYW5kbGVDbGljazogKGU6IGFueSkgPT4gdm9pZFxuICB0ZW1wbGF0ZSgpOiBzdHJpbmcge1xuICAgIGNvbnN0IHsgc2VsZWN0ZWRJbmRleCwgaXNSZXN1bHRMaXN0VmlzaWFibGUsIGxpc3REYXRhLCBrZXl3b3JkIH0gPVxuICAgICAgdGhpcy5pbml0YWxTdGF0ZVxuICAgIGNvbnN0IHsgcmVzdWx0X2xpc3QsIHNlbGVjdGVkLCBtYXRjaGVkIH0gPSBzdHlsZXNcblxuICAgIGNvbnN0IG1hdGNoS2V5d29yZCA9IChpdGVtOiBhbnksIGtleXdvcmQ6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gICAgICBpZiAoIWl0ZW0uaW5jbHVkZXMoa2V5d29yZCkpIHtcbiAgICAgICAgcmV0dXJuIGl0ZW1cbiAgICAgIH1cblxuICAgICAgY29uc3QgbWF0Y2hUZXh0ID0gaXRlbS5tYXRjaChuZXcgUmVnRXhwKGtleXdvcmQsICdnaScpKVswXVxuXG4gICAgICByZXR1cm4gaXRlbS5yZXBsYWNlKFxuICAgICAgICBuZXcgUmVnRXhwKG1hdGNoVGV4dCwgJ2dpJyksXG4gICAgICAgIGA8c3BhbiBjbGFzcz0nJHttYXRjaGVkfSc+JHttYXRjaFRleHR9PC9zcGFuPmBcbiAgICAgIClcbiAgICB9XG5cbiAgICByZXR1cm4gYFxuICAgICAgPHVsIGNsYXNzPScke2lzUmVzdWx0TGlzdFZpc2lhYmxlID8gYCR7cmVzdWx0X2xpc3R9YCA6ICdoaWRlJ30nPlxuICAgICAgJHtBcnJheS5mcm9tKGxpc3REYXRhKVxuICAgICAgICA/Lm1hcChcbiAgICAgICAgICAoaXRlbSwgaW5kZXgpID0+XG4gICAgICAgICAgICBgPGxpIGNsYXNzPScke1xuICAgICAgICAgICAgICBpbmRleCA9PT0gc2VsZWN0ZWRJbmRleCA/IGAke3NlbGVjdGVkfWAgOiAnJ1xuICAgICAgICAgICAgfScgZGF0YS1pbmRleD0nJHtpbmRleH0nPlxuICAgICAgICAgICAgICA8c3Bhbj4ke21hdGNoS2V5d29yZChpdGVtLnRpdGxlLCBrZXl3b3JkKX08L3NwYW4+XG4gICAgICAgICAgICAgIDxzcGFuPlsgJHttYXRjaEtleXdvcmQoaXRlbS5hdXRob3IsIGtleXdvcmQpfSBdIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvbGk+YFxuICAgICAgICApXG4gICAgICAgIC5qb2luKCcnKX1cbiAgICAgIDwvdWw+XG4gICAgYFxuICB9XG5cbiAgc2V0dXAoKTogdm9pZCB7XG4gICAgY29uc3QgeyBvbkNsaWNrIH0gPSB0aGlzLmluaXRhbFN0YXRlXG5cbiAgICB0aGlzLmhhbmRsZUNsaWNrID0gKGUpOiB2b2lkID0+IHtcbiAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0IGFzIEhUTUxFbGVtZW50XG4gICAgICBjb25zdCAkbGkgPSB0YXJnZXQuY2xvc2VzdCgnbGknKVxuICAgICAgaWYgKCRsaSkge1xuICAgICAgICBjb25zdCB7IGluZGV4IH0gPSAkbGkuZGF0YXNldFxuICAgICAgICBvbkNsaWNrKHRoaXMuaW5pdGFsU3RhdGUubGlzdERhdGFbcGFyc2VJbnQoaW5kZXgpXSwgaW5kZXgpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc2V0RXZlbnQoKTogdm9pZCB7XG4gICAgdGhpcy5ub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVDbGljaylcblxuICAgIGNvbnN0IHsgc2VsZWN0ZWRJbmRleCB9ID0gdGhpcy5pbml0YWxTdGF0ZVxuXG4gICAgY29uc3QgdGVtcCA9IDQwLjUgLy9saSBzaXplXG4gICAgaWYgKChzZWxlY3RlZEluZGV4ID4gMCAmJiBzZWxlY3RlZEluZGV4IDw9IDMpIHx8IHNlbGVjdGVkSW5kZXggPT09IDApIHtcbiAgICAgIHRoaXMubm9kZS5zY3JvbGxUbygwLCAwKVxuICAgIH1cblxuICAgIGlmIChzZWxlY3RlZEluZGV4ID4gMykge1xuICAgICAgdGhpcy5ub2RlLnNjcm9sbFRvKDAsIHRlbXAgKiAoc2VsZWN0ZWRJbmRleCAtIDMpKVxuICAgIH1cbiAgfVxuXG4gIGNsZWFyRXZlbnQoKTogdm9pZCB7XG4gICAgdGhpcy5ub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVDbGljaylcbiAgfVxufVxuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQgZGVmYXVsdCB7XCJpdGVtX2luZm9cIjpcImJfQmlFUUNhV04wTjRnclFOb1JfXCIsXCJtb2RhbFwiOlwiZlZ3WmNYaU5Uel9iNmpDeThNdVpcIixcImluZm9fdGV4dF9jb250XCI6XCJUQmVfRDBub1RRMUFYUXZ0cUlhMlwifTsiLCJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAY29tcG9uZW50cydcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9TZWFyY2hJdGVtSW5mby5tb2R1bGUuc2NzcydcbmltcG9ydCB0eXBlIHsgSVNlYXJjaEl0ZW1JbmZvU3RhdGUgfSBmcm9tICcuL3R5cGUnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlYXJjaEl0ZW1JbmZvIGV4dGVuZHMgQ29tcG9uZW50PElTZWFyY2hJdGVtSW5mb1N0YXRlPiB7XG4gIHRlbXBsYXRlKCk6IHN0cmluZyB7XG4gICAgY29uc3QgeyBpc01vZGFsVmlzaWFibGUsIHNlbGVjdGVkSXRlbSB9ID0gdGhpcy5pbml0YWxTdGF0ZVxuICAgIGNvbnN0IHsgaXRlbV9pbmZvLCBtb2RhbCwgaW5mb190ZXh0X2NvbnQgfSA9IHN0eWxlc1xuICAgIHJldHVybiBgXG4gICAgPGRpdj5cbiAgICAke1xuICAgICAgaXNNb2RhbFZpc2lhYmxlXG4gICAgICAgID8gYFxuICAgICAgPGRpdiBjbGFzcz0nJHtpdGVtX2luZm99IGl0ZW1faW5mbycgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY2xhc3M9JyR7bW9kYWx9J1xuICAgICAgICAgIHN0eWxlPSdiYWNrZ3JvdW5kLWltYWdlOmxpbmVhci1ncmFkaWVudChyZ2JhKDAsIDAsIDAsIDAuNSksIHJnYmEoMCwgMCwgMCwgMSkpLCB1cmwoJHtzZWxlY3RlZEl0ZW0uaW1nfSk7Jz5cbiAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwibWF0ZXJpYWwtaWNvbnNcIj5jYW5jZWw8L2J1dHRvbj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPScke2luZm9fdGV4dF9jb250fSc+XG4gICAgICAgICAgICA8cD4ke3NlbGVjdGVkSXRlbS50aXRsZX08L3A+XG4gICAgICAgICAgICA8cD4ke3NlbGVjdGVkSXRlbS5hdXRob3J9PC9wPlxuICAgICAgICAgICAgPHA+JHtzZWxlY3RlZEl0ZW0uc2VydmljZX0g7Jew7J6sPC9wPlxuICAgICAgICAgICAgPGEgaHJlZj0nJHtzZWxlY3RlZEl0ZW0udXJsfScgdGFyZ2V0PSdfYmxhbmsnPuuztOufrOqwgOq4sDwvYT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIGBcbiAgICAgICAgOiAnJ1xuICAgIH1cbiAgICA8L2Rpdj5cbiAgICBgXG4gIH1cbn1cbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IGRlZmF1bHQge1wiZXJyb3JfbWVnXCI6XCJtYXdMNWpZUGJsbVh4Y3dKN2YzWFwiLFwidXBcIjpcIkVBNUtmWVNKbFNBNUxqZzNXeW5zXCJ9OyIsImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bjb21wb25lbnRzJ1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0Vycm9yTWVnLm1vZHVsZS5zY3NzJ1xuaW1wb3J0IHR5cGUgeyBJRXJyb3JNZWdTdGF0ZSB9IGZyb20gJy4vdHlwZSdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXJyb3JNZWcgZXh0ZW5kcyBDb21wb25lbnQ8SUVycm9yTWVnU3RhdGU+IHtcbiAgdGVtcGxhdGUoKTogc3RyaW5nIHtcbiAgICBjb25zdCB7IGlzRXJyb3JNZWcsIGtleXdvcmQsIGlzUmVzdWx0TGlzdFZpc2lhYmxlIH0gPSB0aGlzLmluaXRhbFN0YXRlXG4gICAgY29uc3QgeyBlcnJvcl9tZWcgfSA9IHN0eWxlc1xuXG4gICAgY29uc3Qga2V5d29yZEVycm9yID0gYDxzcGFuPuqygOyDieyWtOulvCDsnoXroKXtlbTso7zshLjsmpQgOik8L3NwYW4+YFxuICAgIGNvbnN0IGxlbmd0aEVycm9yID0gYDxzcGFuPjxzdHJvbmc+J+uRkCDquIDsnpAnPC9zdHJvbmc+IOu2gO2EsCDqsoDsg4nsnbQg6rCA64ql7ZWp64uI64ukIDopPC9zcGFuPmBcbiAgICBjb25zdCBub25lUmVzdWx0RXJyb3IgPSBgPHNwYW4+PHN0cm9uZz4nJHtrZXl3b3JkfSc8L3N0cm9uZz4g7J2YIOqygOyDiSDqsrDqs7zqsIAg7JeG7Iq164uI64ukIDooPC9zcGFuPmBcblxuICAgIGNvbnN0IEVycm9yVHlwZSA9ICgpOiBzdHJpbmcgPT4ge1xuICAgICAgaWYgKGtleXdvcmQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBrZXl3b3JkRXJyb3JcbiAgICAgIH1cblxuICAgICAgaWYgKGtleXdvcmQubGVuZ3RoIDwgMiAmJiBrZXl3b3JkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIGxlbmd0aEVycm9yXG4gICAgICB9XG5cbiAgICAgIGlmICghaXNSZXN1bHRMaXN0VmlzaWFibGUgJiYga2V5d29yZC5sZW5ndGggPj0gMikge1xuICAgICAgICByZXR1cm4gbm9uZVJlc3VsdEVycm9yXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgRXJyb3JNZXNzYWdlU2hvdyA9ICgpOiBzdHJpbmcgPT4ge1xuICAgICAgcmV0dXJuIGAke2lzRXJyb3JNZWcgPyBFcnJvclR5cGUoKSA6ICcnfWBcbiAgICB9XG5cbiAgICByZXR1cm4gYFxuICAgICAgPGRpdiBjbGFzcz0nJHtlcnJvcl9tZWd9Jz5cbiAgICAgICAgJHtFcnJvck1lc3NhZ2VTaG93KCl9XG4gICAgICA8L2Rpdj5cbiAgICBgXG4gIH1cbn1cbiIsImltcG9ydCB7IHNlbGVjdEVsIH0gZnJvbSAnQHV0aWxzJ1xuaW1wb3J0IEFwcCBmcm9tICdBcHAnXG5pbXBvcnQgJy4vc2Nzcy9pbmRleC5zY3NzJ1xuXG5uZXcgQXBwKHsgbm9kZTogc2VsZWN0RWwoZG9jdW1lbnQsICcjcm9vdCcpLCBpbml0YWxTdGF0ZTogbnVsbCB9KVxuIiwiaW1wb3J0IHsgYXBpIH0gZnJvbSAnQGFwaSdcbmltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgU2VhcmNoSW5wdXQsXG4gIFNlYXJjaFJlc3VsdCxcbiAgU2VhcmNoSXRlbUluZm8sXG4gIEVycm9yTWVnXG59IGZyb20gJ0Bjb21wb25lbnRzJ1xuaW1wb3J0IHsgQUNUSU9OS0VZUyB9IGZyb20gJ0Bjb25zdGFudHMnXG5pbXBvcnQgdHlwZSB7IElDb21wb25lbnRQcm9wcywgSUl0ZW0sIElBcHBTdGF0ZSB9IGZyb20gJ0Btb2RlbHMnXG5pbXBvcnQgeyBkZWJvdW5jZSwgc2VsZWN0RWwsIGdldEl0ZW0gfSBmcm9tICdAdXRpbHMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwcCBleHRlbmRzIENvbXBvbmVudDxJQXBwU3RhdGU+IHtcbiAgaGFuZGxlQ2hhbmdlOiAoa2V5d29yZDogc3RyaW5nKSA9PiB2b2lkXG4gIGhhbmRsZUtleUNoYW5nZTogKGU6IEtleWJvYXJkRXZlbnQpID0+IHZvaWRcbiAgaGFuZGxlQ2xpY2s6IChlOiBNb3VzZUV2ZW50KSA9PiB2b2lkXG4gIGNvbnN0cnVjdG9yKHsgbm9kZSB9OiBJQ29tcG9uZW50UHJvcHM8SUFwcFN0YXRlPikge1xuICAgIGNvbnN0IGluaXRhbFN0YXRlID0ge1xuICAgICAga2V5d29yZDogJycsXG4gICAgICBzZWxlY3RlZEluZGV4OiAwLFxuICAgICAgbGlzdERhdGE6IFtdLFxuICAgICAgc2VsZWN0ZWRJdGVtOiB7fSxcbiAgICAgIGlzUmVzdWx0TGlzdFZpc2lhYmxlOiBmYWxzZSxcbiAgICAgIGlzTW9kYWxWaXNpYWJsZTogZmFsc2UsXG4gICAgICBpc0Vycm9yTWVnOiB0cnVlXG4gICAgfSBhcyBJQXBwU3RhdGVcblxuICAgIHN1cGVyKHsgbm9kZSwgaW5pdGFsU3RhdGUgfSlcbiAgfVxuXG4gIHNldHVwKCk6IHZvaWQge1xuICAgIHRoaXMuc2V0U3RhdGUoeyAuLi50aGlzLmluaXRhbFN0YXRlLCAuLi5nZXRJdGVtKCdzZWFyY2hTdGF0ZScpIH0pXG4gICAgdGhpcy5oYW5kbGVDaGFuZ2UgPSBkZWJvdW5jZShhc3luYyAoa2V5d29yZCk6IFByb21pc2U8YW55PiA9PiB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWNvbmZ1c2luZy12b2lkLWV4cHJlc3Npb25cbiAgICAgIGNvbnN0IGxpc3REYXRhID0gYXdhaXQgYXBpLmdldFdlYlRvb25MaXN0KGtleXdvcmQpXG4gICAgICBpZiAoIWtleXdvcmQpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgaXNSZXN1bHRMaXN0VmlzaWFibGU6IGZhbHNlLFxuICAgICAgICAgIHNlbGVjdGVkSW5kZXg6IDAsXG4gICAgICAgICAga2V5d29yZDogJycsXG4gICAgICAgICAgbGlzdERhdGE6IGxpc3REYXRhLmxlbmd0aCA/IGxpc3REYXRhIDogW10sXG4gICAgICAgICAgc2VsZWN0ZWRJdGVtOiB7fVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgaXNSZXN1bHRMaXN0VmlzaWFibGU6IGxpc3REYXRhLmxlbmd0aCA+IDAsXG4gICAgICAgICAgbGlzdERhdGE6IGxpc3REYXRhLFxuICAgICAgICAgIGtleXdvcmQ6IGtleXdvcmQsXG4gICAgICAgICAgaXNFcnJvck1lZzogbGlzdERhdGEubGVuZ3RoID4gMCA/IGZhbHNlIDogdHJ1ZVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sIDMwMClcblxuICAgIHRoaXMuaGFuZGxlS2V5Q2hhbmdlID0gKGUpOiB2b2lkID0+IHtcbiAgICAgIGNvbnN0IHsgbGlzdERhdGEsIHNlbGVjdGVkSW5kZXggfSA9IHRoaXMuaW5pdGFsU3RhdGVcblxuICAgICAgaWYgKE9iamVjdC52YWx1ZXMoQUNUSU9OS0VZUykuaW5jbHVkZXMoZS5rZXkpICYmICFsaXN0RGF0YS5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGxhc3RJbmRleCA9IGxpc3REYXRhLmxlbmd0aCAtIDFcbiAgICAgIGxldCBuZXh0SW5kZXggPSBzZWxlY3RlZEluZGV4XG5cbiAgICAgIHN3aXRjaCAoZS5rZXkpIHtcbiAgICAgICAgY2FzZSBBQ1RJT05LRVlTLkFSUk9XVVA6XG4gICAgICAgICAgbmV4dEluZGV4ID0gc2VsZWN0ZWRJbmRleCA9PT0gMCA/IGxhc3RJbmRleCA6IG5leHRJbmRleCAtIDFcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHNlbGVjdGVkSW5kZXg6IG5leHRJbmRleFxuICAgICAgICAgIH0pXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSBBQ1RJT05LRVlTLkFSUk9XRE9XTjpcbiAgICAgICAgICBuZXh0SW5kZXggPSBzZWxlY3RlZEluZGV4ID09PSBsYXN0SW5kZXggPyAwIDogbmV4dEluZGV4ICsgMVxuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgc2VsZWN0ZWRJbmRleDogbmV4dEluZGV4XG4gICAgICAgICAgfSlcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIEFDVElPTktFWVMuRU5URVI6XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBzZWxlY3RlZEl0ZW06IGxpc3REYXRhW3NlbGVjdGVkSW5kZXhdLFxuICAgICAgICAgICAgaXNNb2RhbFZpc2lhYmxlOiB0cnVlXG4gICAgICAgICAgfSlcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIEFDVElPTktFWVMuRVNDQVBFOlxuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgaXNNb2RhbFZpc2lhYmxlOiBmYWxzZVxuICAgICAgICAgIH0pXG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmhhbmRsZUNsaWNrID0gKGUpOiB2b2lkID0+IHtcbiAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0IGFzIEhUTUxFbGVtZW50XG4gICAgICBpZiAodGFyZ2V0LmNsb3Nlc3QoJ2J1dHRvbicpIHx8IHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2l0ZW1faW5mbycpKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGlzTW9kYWxWaXNpYWJsZTogZmFsc2VcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0ZW1wbGF0ZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiBgXG4gICAgICA8bWFpbiBpZD0ncm9vdCc+XG4gICAgICAgIDxoZWFkZXIgY2xhc3M9J2hlYWRlcic+V2VidG9vbnMgU2VhcmNoPC9oZWFkZXI+XG4gICAgICAgIDxkaXYgY2xhc3M9J2NvbnRhaW5lcic+XG4gICAgICAgICAgPFNlYXJjaElucHV0PjwvU2VhcmNoSW5wdXQ+XG4gICAgICAgICAgPEVycm9yTWVzc2FnZT48L0Vycm9yTWVzc2FnZT5cbiAgICAgICAgICA8U2VhcmNoUmVzdWx0TGlzdD48L1NlYXJjaFJlc3VsdExpc3Q+XG4gICAgICAgICAgPFNlYXJjaEl0ZW1JbmZvPjwvU2VhcmNoSXRlbUluZm8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9tYWluPlxuICBgXG4gIH1cblxuICByZW5kZXJDaGlsZENvbXBvbmVudCgpOiB2b2lkIHtcbiAgICBjb25zdCB7XG4gICAgICBrZXl3b3JkLFxuICAgICAgc2VsZWN0ZWRJbmRleCxcbiAgICAgIGxpc3REYXRhLFxuICAgICAgaXNSZXN1bHRMaXN0VmlzaWFibGUsXG4gICAgICBzZWxlY3RlZEl0ZW0sXG4gICAgICBpc01vZGFsVmlzaWFibGUsXG4gICAgICBpc0Vycm9yTWVnXG4gICAgfSA9IHRoaXMuaW5pdGFsU3RhdGVcblxuICAgIG5ldyBTZWFyY2hJbnB1dCh7XG4gICAgICBub2RlOiBzZWxlY3RFbCh0aGlzLm5vZGUsICdTZWFyY2hJbnB1dCcpLFxuICAgICAgaW5pdGFsU3RhdGU6IHtcbiAgICAgICAga2V5d29yZDogdGhpcy5pbml0YWxTdGF0ZS5rZXl3b3JkLFxuICAgICAgICBvbklucHV0OiB0aGlzLmhhbmRsZUNoYW5nZVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBjb25zdCBlcnJvck1lZyA9IG5ldyBFcnJvck1lZyh7XG4gICAgICBub2RlOiBzZWxlY3RFbCh0aGlzLm5vZGUsICdFcnJvck1lc3NhZ2UnKSxcbiAgICAgIHJlbmRlclN0YXRlS2V5OiBbJ3NlbGVjdGVkSXRlbScsICdzZWxlY3RlZEluZGV4J10sXG4gICAgICBpbml0YWxTdGF0ZTogeyBpc0Vycm9yTWVnLCBrZXl3b3JkLCBpc1Jlc3VsdExpc3RWaXNpYWJsZSB9XG4gICAgfSlcblxuICAgIGNvbnN0IHNlYXJjaFJlc3VsdCA9IG5ldyBTZWFyY2hSZXN1bHQoe1xuICAgICAgbm9kZTogc2VsZWN0RWwodGhpcy5ub2RlLCAnU2VhcmNoUmVzdWx0TGlzdCcpLFxuICAgICAgaW5pdGFsU3RhdGU6IHtcbiAgICAgICAga2V5d29yZCxcbiAgICAgICAgbGlzdERhdGEsXG4gICAgICAgIGlzUmVzdWx0TGlzdFZpc2lhYmxlLFxuICAgICAgICBzZWxlY3RlZEluZGV4LFxuICAgICAgICBvbkNsaWNrOiAoc2VsZWN0ZWRJdGVtOiBJSXRlbSwgaW5kZXg6IHN0cmluZyk6IHZvaWQgPT4ge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgc2VsZWN0ZWRJdGVtOiBzZWxlY3RlZEl0ZW0sXG4gICAgICAgICAgICBpc01vZGFsVmlzaWFibGU6IHRydWUsXG4gICAgICAgICAgICBzZWxlY3RlZEluZGV4OiBOdW1iZXIoaW5kZXgpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBjb25zdCBzZWFyY2hJdGVtSW5mbyA9IG5ldyBTZWFyY2hJdGVtSW5mbyh7XG4gICAgICBub2RlOiBzZWxlY3RFbCh0aGlzLm5vZGUsICdTZWFyY2hJdGVtSW5mbycpLFxuICAgICAgaW5pdGFsU3RhdGU6IHtcbiAgICAgICAgc2VsZWN0ZWRJdGVtLFxuICAgICAgICBpc01vZGFsVmlzaWFibGVcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgdGhpcy5zdWJzY3JpYmUoc2VhcmNoUmVzdWx0KVxuICAgIHRoaXMuc3Vic2NyaWJlKHNlYXJjaEl0ZW1JbmZvKVxuICAgIHRoaXMuc3Vic2NyaWJlKGVycm9yTWVnKVxuICB9XG5cbiAgc2V0RXZlbnQoKTogdm9pZCB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5oYW5kbGVLZXlDaGFuZ2UpXG4gICAgdGhpcy5ub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVDbGljaylcbiAgfVxuXG4gIGNsZWFyRXZlbnQoKTogdm9pZCB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5oYW5kbGVLZXlDaGFuZ2UpXG4gICAgdGhpcy5ub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVDbGljaylcbiAgfVxufVxuIiwiaW1wb3J0IHR5cGUgeyBJRGVib3VuY2UgfSBmcm9tICcuL3R5cGUnXG5cbmNvbnN0IGRlYm91bmNlOiBJRGVib3VuY2UgPSAoY2FsbGJhY2ssIGRlbGF5KSA9PiB7XG4gIGxldCB0aW1lb3V0OiBudW1iZXJcblxuICByZXR1cm4gZXZlbnQgPT4ge1xuICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dClcbiAgICB9XG5cbiAgICB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoY2FsbGJhY2ssIGRlbGF5LCBldmVudClcbiAgfVxufVxuXG5leHBvcnQgeyBkZWJvdW5jZSB9XG4iLCJpbXBvcnQgeyBCQVNFX1VSTCwgUkVRVVNFVF9NRVNTQUdFIH0gZnJvbSAnQGNvbnN0YW50cydcblxuY29uc3QgcmVxdXNldCA9IGFzeW5jICh1cmw6IHN0cmluZyk6IFByb21pc2U8YW55PiA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwpXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFJFUVVTRVRfTUVTU0FHRS5IVFRQX0VSUk9SKVxuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXG4gICAgcmV0dXJuIGRhdGEud2VidG9vbnNcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKGAke1JFUVVTRVRfTUVTU0FHRS5TRVJWRVJfRVJST1J9ICR7ZXJyb3IubWVzc2FnZX1gKVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBhcGkgPSB7XG4gIGdldFdlYlRvb25MaXN0OiBhc3luYyAoa2V5d29yZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+ID0+XG4gICAgcmVxdXNldChgJHtCQVNFX1VSTH0vc2VhcmNoP2tleXdvcmQ9JHtrZXl3b3JkfWApXG59XG4iXSwibmFtZXMiOlsic2VsZWN0RWwiLCJzY29wZSIsImRvY3VtZW50Iiwic2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yIiwiQ29udmVydFRlbXBsYXRlVG9Db21wb25lbnQiLCJvbGROb2RlIiwidGhpcyIsIm5vZGUiLCJjb21wb25lbnRDaGlsZHJlbiIsIkFycmF5IiwiZnJvbSIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInRlbXBsYXRlIiwiYm9keSIsImNoaWxkcmVuIiwiY29tcG9uZW50IiwiRG9jdW1lbnRGcmFnbWVudCIsImFwcGVuZCIsImFmdGVyIiwibmV4dFNpYmxpbmciLCJvbGRDU1MiLCJjbGFzc0xpc3QiLCJ2YWx1ZSIsInRyaW0iLCJuZXdDU1MiLCJjc3NWYWx1ZSIsImNsYXNzTmFtZSIsInJlbW92ZSIsIkFDVElPTktFWVMiLCJBUlJPV1VQIiwiQVJST1dET1dOIiwiRU5URVIiLCJFU0NBUEUiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsImluaXRhbFN0YXRlIiwicmVuZGVyU3RhdGVLZXkiLCJTZXQiLCJzdWJzY3JpYmVycyIsImlzTmVlZFJlbmRlciIsImlzTmVlZFVwZGF0ZSIsInNldHVwIiwicmVuZGVyIiwid2luZG93IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FsbCIsInNldEV2ZW50IiwicmVuZGVyQ2hpbGRDb21wb25lbnQiLCJ1cGRhdGVyIiwiY2xlYXJFdmVudCIsInN1YnNjcmliZSIsImZvckVhY2giLCJzdWJzY3JpYmVyIiwiYWRkIiwibm90aWZ5IiwibmV3U3RhdGUiLCJzZXRTdGF0ZSIsImNoZWNrVXBkYXRhU3RhdGUiLCJyZWZsZWN0TmVlZFJlbmRlciIsInJlZmxlY3RTdGF0ZSIsImtleSIsInNlc3Npb25TdG9yYWdlIiwic2V0SXRlbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJlcnJvciIsIkVycm9yIiwiY3VycmVudFN0YXRlIiwibmV4dFN0YXRlIiwidXBkYXRlZFN0YXRlS2V5cyIsIk9iamVjdCIsImtleXMiLCJzdGF0ZSIsImZpbHRlciIsImluY2x1ZGVzIiwibGVuZ3RoIiwic3RhdGVLZXkiLCJTZWFyY2hJbnB1dCIsIlNlYXJjaElucHV0X19pbnB1dCIsImtleXdvcmQiLCJvbklucHV0IiwiaGFuZGxlSW5wdXQiLCJlIiwidGFyZ2V0IiwiaGFuZGxlRm9jdXMiLCJmb2N1cyIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiU2VhcmNoUmVzdWx0Iiwic2VsZWN0ZWRJbmRleCIsImlzUmVzdWx0TGlzdFZpc2lhYmxlIiwibGlzdERhdGEiLCJyZXN1bHRfbGlzdCIsInNlbGVjdGVkIiwibWF0Y2hlZCIsIm1hdGNoS2V5d29yZCIsIml0ZW0iLCJtYXRjaFRleHQiLCJtYXRjaCIsIlJlZ0V4cCIsInJlcGxhY2UiLCJtYXAiLCJpbmRleCIsInRpdGxlIiwiYXV0aG9yIiwiam9pbiIsIm9uQ2xpY2siLCJoYW5kbGVDbGljayIsIiRsaSIsImNsb3Nlc3QiLCJkYXRhc2V0IiwicGFyc2VJbnQiLCJzY3JvbGxUbyIsIlNlYXJjaEl0ZW1JbmZvIiwiaXNNb2RhbFZpc2lhYmxlIiwic2VsZWN0ZWRJdGVtIiwiaXRlbV9pbmZvIiwibW9kYWwiLCJpbmZvX3RleHRfY29udCIsImltZyIsInNlcnZpY2UiLCJ1cmwiLCJFcnJvck1lZyIsImlzRXJyb3JNZWciLCJlcnJvcl9tZWciLCJub25lUmVzdWx0RXJyb3IiLCJzdXBlciIsImdldEl0ZW0iLCJwYXJzZSIsImhhbmRsZUNoYW5nZSIsImNhbGxiYWNrIiwiZGVsYXkiLCJ0aW1lb3V0IiwiZXZlbnQiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiZGVib3VuY2UiLCJyZXNwb25zZSIsImZldGNoIiwib2siLCJqc29uIiwid2VidG9vbnMiLCJjb25zb2xlIiwibWVzc2FnZSIsImFwaSIsImhhbmRsZUtleUNoYW5nZSIsInZhbHVlcyIsImxhc3RJbmRleCIsIm5leHRJbmRleCIsInByZXZlbnREZWZhdWx0IiwiY29udGFpbnMiLCJlcnJvck1lZyIsInNlYXJjaFJlc3VsdCIsIk51bWJlciIsInNlYXJjaEl0ZW1JbmZvIl0sInNvdXJjZVJvb3QiOiIifQ==