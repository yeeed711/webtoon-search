(()=>{"use strict";(()=>{const e=(e=document,t)=>e.querySelector(t);function t(){const e=this.node,t=Array.from((new DOMParser).parseFromString(this.template(),"text/html").body.children),s=new DocumentFragment;s.append(...t),e.after(s),this.node=e.nextSibling;const n=e.classList.value.trim(),i=this.node.classList.value.trim(),a=n!==i&&i||n;a?(this.node.className=a,e.remove()):e.remove()}const s={ARROWUP:"ArrowUp",ARROWDOWN:"ArrowDown",ENTER:"Enter",ESCAPE:"Escape"};var n=function(e,t,s,n){return new(s||(s=Promise))((function(i,a){function r(e){try{l(n.next(e))}catch(e){a(e)}}function o(e){try{l(n.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(r,o)}l((n=n.apply(e,t||[])).next())}))};class i{constructor({node:e,initalState:t,renderStateKey:s=[]}){this.node=e,this.initalState=t,this.renderStateKey=new Set(s),this.subscribers=new Set([]),this.isNeedRender=!1,this.isNeedUpdate=!1,this.setup(),this.render()}setup(){}render(){window.requestAnimationFrame((()=>{t.call(this),this.setEvent(),this.renderChildComponent()}))}updater(){this.isNeedRender?(this.clearEvent(),this.render()):this.renderChildComponent()}renderChildComponent(){}setEvent(){}clearEvent(){}template(){return""}subscribe(...e){e.forEach((e=>{this.subscribers.add(e)}))}notify(e){Array.from(this.subscribers).forEach((t=>{t.setState(e),t.updater(),t.isNeedRender=!1}))}setState(e){this.checkUpdataState(e),this.isNeedUpdate&&(this.reflectNeedRender(e),this.reflectState(e),this.notify(e),((e,t)=>{try{sessionStorage.setItem("searchState",JSON.stringify(t))}catch(e){throw new Error("저장이 되지 않았습니다!")}})(0,this.initalState))}checkUpdataState(e){const t=JSON.stringify(Object.assign({},this.initalState)),s=JSON.stringify(Object.assign(Object.assign({},this.initalState),e));this.isNeedUpdate=t!==s}reflectNeedRender(e){const t=Object.keys(e),s=Array.from(this.renderStateKey),n=t.filter((e=>s.includes(e)));this.isNeedRender=0===n.length}reflectState(e){Object.keys(e).forEach((t=>{const s=t;this.initalState[s]=e[s]}))}}const a={SearchInput__input:"oZFdS8AMjR5RMYyBNvKV"};class r extends i{template(){const{SearchInput__input:e}=a,{keyword:t}=this.initalState;return`\n        <input class='${e}' type='text' placeholder='웹툰제목, 작가이름으로 검색' value='${t}'/>\n      `}setup(){const{onInput:e}=this.initalState;this.handleInput=t=>{e(t.target.value)},this.handleFocus=()=>{this.node.focus()}}setEvent(){this.node.addEventListener("input",this.handleInput),this.handleFocus()}clearEvent(){this.node.removeEventListener("input",this.handleInput)}}const o={result_list:"hjCdco27lJJTo2oyRN5w",selected:"yqBqWxiR9AStGB58rLfS",matched:"OAf5JwkD9oSOJWplWK_0"};class l extends i{template(){const{selectedIndex:e,isResultListVisiable:t,listData:s,keyword:n}=this.initalState,{result_list:i,selected:a,matched:r}=o,l=(e,t)=>{if(!e.includes(t))return e;const s=e.match(new RegExp(t,"gi"))[0];return e.replace(new RegExp(s,"gi"),`<span class='${r}'>${s}</span>`)};return`\n        <ul class='${t?i:"hide"}'>\n        ${null===(c=Array.from(s))||void 0===c?void 0:c.map(((t,s)=>`<li ${s===e?`class=${a}`:""} data-index='${s}'>\n                <span>${l(t.title,n)}</span>\n                <span>[ ${l(t.author,n)} ] </span>\n              </li>`)).join("")}\n        </ul>\n      `;var c}setup(){const{onClick:e}=this.initalState;this.handleClick=t=>{const s=t.target.closest("li");if(s){const{index:t}=s.dataset;e(this.initalState.listData[parseInt(t)],t)}}}setEvent(){this.node.addEventListener("click",this.handleClick);const{selectedIndex:e}=this.initalState;(e>0&&e<=3||0===e)&&this.node.scrollTo(0,0),e>3&&this.node.scrollTo(0,40.5*(e-3))}clearEvent(){this.node.removeEventListener("click",this.handleClick)}}const c={item_info:"b_BiEQCaWN0N4grQNoR_",modal:"fVwZcXiNTz_b6jCy8MuZ",info_text_cont:"TBe_D0noTQ1AXQvtqIa2"};class d extends i{template(){const{isModalVisiable:e,selectedItem:t}=this.initalState,{item_info:s,modal:n,info_text_cont:i}=c;return`\n    <div>\n    ${e?`\n        <div class='${s} item_info' >\n          <div\n            class='${n}'\n            style='background-image:linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 1)), url(${t.img});'>\n            <button class="material-icons">cancel</button>\n            <div class='${i}'>\n              <p>${t.title}</p>\n              <p>${t.author}</p>\n              <p>${t.service} 연재</p>\n              <a href='${t.url}' target='_blank'>보러가기</a>\n            </div>\n          </div>\n        </div>      \n      `:""}\n    </div>\n    `}}const h={error_meg:"mawL5jYPblmXxcwJ7f3X",up:"EA5KfYSJlSA5Ljg3Wyns"};class u extends i{template(){const{isErrorMeg:e,keyword:t,isResultListVisiable:s}=this.initalState,{error_meg:n}=h,i=`<span><strong>'${t}'</strong> 의 검색 결과가 없습니다 :(</span>`;return`\n        <div class='${n}'>\n          ${e?0===t.length?"<span>검색어를 입력해주세요 :)</span>":t.length<2&&t.length>0?"<span><strong>'두 글자'</strong> 부터 검색이 가능합니다 :)</span>":!s&&t.length>=2?i:void 0:""}\n        </div>\n      `}}new class extends i{constructor({node:e}){super({node:e,initalState:{keyword:"",selectedIndex:0,listData:[],selectedItem:{},isResultListVisiable:!1,isModalVisiable:!1,isErrorMeg:!0}})}setup(){this.setState(Object.assign(Object.assign({},this.initalState),(e=>{try{const e=sessionStorage.getItem("searchState");return e?JSON.parse(e):[]}catch(e){throw new Error(e)}})())),this.handleChange=((e,t)=>{let s;return t=>{s&&clearTimeout(s),s=window.setTimeout(e,300,t)}})((e=>{return t=this,s=void 0,a=function*(){const t=yield(e=>n(void 0,void 0,void 0,(function*(){return t=`https://korea-webtoon-api.herokuapp.com/search?keyword=${e}`,n(void 0,void 0,void 0,(function*(){try{const e=yield fetch(t);if(!e.ok)throw new Error("서버와의 연결이 불안정합니다!");return(yield e.json()).webtoons}catch(e){console.error(`에러가 발생했습니다! ${e.message}`)}}));var t})))(e);e?this.setState({isResultListVisiable:t.length>0,listData:t,keyword:e,isErrorMeg:!(t.length>0)}):this.setState({isResultListVisiable:!1,selectedIndex:0,keyword:"",listData:t.length?t:[],selectedItem:{}})},new((i=void 0)||(i=Promise))((function(e,n){function r(e){try{l(a.next(e))}catch(e){n(e)}}function o(e){try{l(a.throw(e))}catch(e){n(e)}}function l(t){var s;t.done?e(t.value):(s=t.value,s instanceof i?s:new i((function(e){e(s)}))).then(r,o)}l((a=a.apply(t,s||[])).next())}));var t,s,i,a})),this.handleKeyChange=e=>{const{listData:t,selectedIndex:n}=this.initalState;if(Object.values(s).includes(e.key)&&!t.length)return;const i=t.length-1;let a=n;switch(e.key){case s.ARROWUP:a=0===n?i:a-1,this.setState({selectedIndex:a});break;case s.ARROWDOWN:a=n===i?0:a+1,this.setState({selectedIndex:a});break;case s.ENTER:e.preventDefault(),this.setState({selectedItem:t[n],isModalVisiable:!0});break;case s.ESCAPE:this.setState({isModalVisiable:!1})}},this.handleClick=e=>{const t=e.target;(t.closest("button")||t.classList.contains("item_info"))&&this.setState({isModalVisiable:!1})}}template(){return"\n      <main id='root'>\n        <header class='header'>Webtoons Search</header>\n        <div class='container'>\n          <SearchInput></SearchInput>\n          <ErrorMessage></ErrorMessage>\n          <SearchResultList></SearchResultList>\n          <SearchItemInfo></SearchItemInfo>\n        </div>\n      </main>\n  "}renderChildComponent(){const{keyword:t,selectedIndex:s,listData:n,isResultListVisiable:i,selectedItem:a,isModalVisiable:o,isErrorMeg:c}=this.initalState;new r({node:e(this.node,"SearchInput"),initalState:{keyword:this.initalState.keyword,onInput:this.handleChange}});const h=new u({node:e(this.node,"ErrorMessage"),renderStateKey:["selectedItem","selectedIndex"],initalState:{isErrorMeg:c,keyword:t,isResultListVisiable:i}}),p=new l({node:e(this.node,"SearchResultList"),initalState:{keyword:t,listData:n,isResultListVisiable:i,selectedIndex:s,onClick:(e,t)=>{this.setState({selectedItem:e,isModalVisiable:!0,selectedIndex:Number(t)})}}}),S=new d({node:e(this.node,"SearchItemInfo"),initalState:{selectedItem:a,isModalVisiable:o}});this.subscribe(p),this.subscribe(S),this.subscribe(h)}setEvent(){window.addEventListener("keyup",this.handleKeyChange),this.node.addEventListener("click",this.handleClick)}clearEvent(){window.removeEventListener("keyup",this.handleKeyChange),this.node.removeEventListener("click",this.handleClick)}}({node:e(document,"#root"),initalState:null})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,